

<!-- ![alt text](https://i.ibb.co/4KJx9y0/Screen-Shot-2023-01-13-at-10-04-39-AM.png) -->
## Dependencies 

- [Python 3  ](https://www.python.org/downloads/)
- [Alpaca SDK](https://alpaca.markets/)
- [Vercel](https://vercel.com)
- [Firebase Template](https://github.com/llSourcell/firebase_react_startup_template) *optional*

## Setup Instructions

1. Download the iPython notebook in this repository and upload it to [Colab](colab.research.google.com) to try it out.
2. Setup a simple [flask](https://flask.palletsprojects.com/en/1.1.x/quickstart/) app.
3. To set up a cron job for a Flask app deployed on Vercel that executes a Google Colab notebook at a given link every hour, you can use the built-in Vercel cron feature. Here are the steps to follow:
4. In your Flask app, import the necessary modules to run the Colab notebook, such as gdown or pyngrok
5. Create a new endpoint in your Flask app that triggers the execution of the Colab notebook, using the link to the notebook file.
6. Go to the Vercel project settings for your app and navigate to the "Cron" tab.
7. Create a new cron job that runs every hour by adding the endpoint you created in step 2 to the "Cron Job" field and select the frequency you want to run the job.

Here is a sample code snippet for step 2:

```python

from flask import Flask, jsonify
import gdown
app = Flask(__name__)

@app.route('/run-colab')
def run_colab():
    gdown.download('https://drive.google.com/file/d/<colab_notebook_id>', 'colab.ipynb', quiet=False)
    return jsonify(message='colab notebook ran successfully')

```

## Credits & More Resources

Credits for the notebook go to the Jojo Foundation, and for the API go to Alpaca.



## 🗒️ Answer

Here’s how you can implement a serverless function in a Next.js React TypeScript component to run a Python script when a button is pressed. The response from the server will be displayed in a text element.
In a real Next.js project, the Python script should be placed in a location where the server can access it. The path you specify in the exec command must be absolute path in my project called Jojo the root folder is jojoRootFolder.



### 1. **Create the Serverless API Route**

First, you'll need to create a serverless function in Next.js that will execute the Python script. This will be in the `/app/api` directory.

- **File**: `/app/api/runPythonScript/route.ts`
  
  ```typescript
  import { NextRequest, NextResponse } from 'next/server';
  import { exec } from 'child_process';
  
  export async function POST(req: NextRequest) {
      const body = await req.json();

      return new Promise((resolve, reject) => {
          exec('python3 path/to/your_script.py', (error, stdout, stderr) => {
              if (error) {
                  resolve(NextResponse.json({ message: `Error: ${stderr}` }));
              } else {
                  resolve(NextResponse.json({ message: stdout }));
              }
          });
      });
  }
  ```

### 2. **Create the React Component**

In your React component (`page.tsx`), add a button to send a request to the API and handle the response.

- **File**: `/app/page.tsx`
  
  ```typescript
  'use client';

  import React, { useState } from 'react';

  const Page: React.FC = () => {
      const [message, setMessage] = useState<string>('');

      const handleClick = async () => {
          const response = await fetch('/api/runPythonScript', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
              },
              body: JSON.stringify({}),
          });

          const data = await response.json();
          setMessage(data.message);
      };

      return (
          <div>
              <button onClick={handleClick}>Run Python Script</button>
              <p>Response: {message}</p>
          </div>
      );
  };

  export default Page;
  ```

### 3. **Explanation**

1. **Serverless API Route (`route.ts`)**:
   - The serverless function runs the Python script using Node.js `child_process.exec`.
   - The output from the Python script is returned as a JSON response.

2. **React Component (`page.tsx`)**:
   - A button triggers the `handleClick` function, which sends a POST request to the serverless API.
   - The response from the Python script is then displayed in a paragraph element.

### 4. **Important Notes**:
- Ensure the Python script has the correct path in the `exec` command.
- Make sure the Python environment is properly configured on the server.

## 🌐 Sources
1. [nextjs.org - Data Fetching: Server Actions and Mutations](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations)
2. [reddit.com - Python Serverless function with next js](https://www.reddit.com/r/nextjs/comments/1brms6j/python_serverless_function_with_next_js/)


In a real Next.js project, the Python script should be placed in a location where the server can access it. The path you specify in the `exec` command must be relative to the root of your project or an absolute path.

### Common Places to Store the Python Script:

1. **In a `scripts` Directory**:
   - You can create a `scripts` directory in the root of your project and place the Python script there.
   - The path in the `exec` command would be something like:

     ```typescript
     exec('python3 scripts/your_script.py', ...)
     ```


4. **Absolute Path**:
   - If the script is located outside of the project directory, use an absolute path:

     ```typescript
     exec('/absolute/path/to/your_script.py', ...)
     exec('scripts/your_script.py', ...)
     ```

### Example Project Structure:
```bash
/my-nextjs-project
|-- /app
|   |-- /api
|       |-- /runPythonScript
|           |-- route.ts
|   |-- page.tsx
|-- /scripts
|   |-- your_script.py
|-- /public
|-- package.json
|-- next.config.js
```

### Adjusting the `exec` Command:
If the script is in the `scripts` directory, your `route.ts` would look like this:

```typescript
exec('python3 scripts/your_script.py', (error, stdout, stderr) => {
    ...
});
```
